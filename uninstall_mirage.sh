#!/bin/bash
# Uninstall Mirage + –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Nuitka
# Usage:
#   ./uninstall_mirage.sh [--dry-run] [--purge] [--all] [-y|--yes]

set -euo pipefail

PACKAGE_NAME="Mirage"   # –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ (—è—Ä–ª—ã–∫–∏/–ø–∞–ø–∫–∏)
ENTRY_BASENAME="app"    # –±–∞–∑–æ–≤–æ–µ –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (app.py -> app.*)

DRY_RUN=false
PURGE=false
ALL=false
ASSUME_YES=false

for arg in "$@"; do
  case "$arg" in
    --dry-run) DRY_RUN=true ;;
    --purge)   PURGE=true ;;
    --all)     ALL=true ;;
    --yes|-y)  ASSUME_YES=true ;;
    -h|--help)
      echo "Options: --dry-run  --purge  --all  -y|--yes"
      exit 0
      ;;
    *)
      echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $arg"
      exit 1
      ;;
  esac
done

log() { echo -e "$@"; }
ask_yn() { $ASSUME_YES && return 0; read -r -p "$1 [y/N]: " ans; [[ "${ans,,}" == y || "${ans,,}" == yes ]]; }
safe_remove() {
  local path="$1" desc="$2"
  if [[ -e "$path" ]]; then
    if $DRY_RUN; then log "üîç DRY-RUN: –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω $desc: $path"
    else rm -rf --one-file-system "$path"; log "‚úÖ –£–¥–∞–ª—ë–Ω $desc: $path"
    fi
  else log "‚ÑπÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω $desc: $path"
  fi
}

APP_MENU_DIR="$HOME/.local/share/applications"
AUTOSTART_DIR="$HOME/.config/autostart"
CONFIG_DIR="$HOME/.config/mirage"

STANDALONE_DIR="$PWD/${PACKAGE_NAME}-standalone"
RUNNER_FILE="$PWD/${PACKAGE_NAME}-run"
ONEFILE_BIN="$PWD/${PACKAGE_NAME}-onefile"

DESKTOP_MAIN="${APP_MENU_DIR}/${PACKAGE_NAME}.desktop"
LEGACY_ONE_AUTOSTART="${AUTOSTART_DIR}/${PACKAGE_NAME}-onefile.desktop"
LEGACY_AUTOSTART="${AUTOSTART_DIR}/${PACKAGE_NAME}.desktop"
DEFAULT_AUTOSTART="${AUTOSTART_DIR}/${PACKAGE_NAME}.desktop"

BUILD_DIRS=(
  "$PWD/build_standalone"
  "$PWD/${PACKAGE_NAME}.build"
  "$PWD/${PACKAGE_NAME}.dist"
  "$PWD/${PACKAGE_NAME}.onefile-build"
  "$PWD/${ENTRY_BASENAME}.build"
  "$PWD/${ENTRY_BASENAME}.dist"
  "$PWD/${ENTRY_BASENAME}.onefile-build"
)

shopt -s nullglob
for d in "$PWD"/*.build "$PWD"/*.dist "$PWD"/*.onefile-build; do
  BUILD_DIRS+=("$d")
done
shopt -u nullglob

echo "üóëÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é ${PACKAGE_NAME}‚Ä¶"
echo "    DRY_RUN = $DRY_RUN"
echo "    PURGE   = $PURGE"
echo "    ALL     = $ALL"

if ! ask_yn "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ ${PACKAGE_NAME}?"; then
  echo "–û—Ç–º–µ–Ω–µ–Ω–æ."; exit 0
fi

echo ""
echo "üîß –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è‚Ä¶"
safe_remove "$STANDALONE_DIR"  "Standalone-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
safe_remove "$RUNNER_FILE"     "runner-—Å–∫—Ä–∏–ø—Ç"
safe_remove "$ONEFILE_BIN"     "onefile-–±–∏–Ω–∞—Ä–Ω–∏–∫"

echo ""
echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ —è—Ä–ª—ã–∫–æ–≤ .desktop‚Ä¶"
safe_remove "$DESKTOP_MAIN"         "—è—Ä–ª—ã–∫ –º–µ–Ω—é"
safe_remove "$LEGACY_ONE_AUTOSTART" "–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (legacy onefile)"
safe_remove "$LEGACY_AUTOSTART"     "–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (legacy)"
if [[ "$DEFAULT_AUTOSTART" != "$LEGACY_AUTOSTART" ]]; then
  safe_remove "$DEFAULT_AUTOSTART" "–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
fi

echo ""
echo "üßº –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ Nuitka‚Ä¶"
for d in "${BUILD_DIRS[@]}"; do
  safe_remove "$d" "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å–±–æ—Ä–∫–∏"
done

echo ""
if $PURGE; then
  echo "üß® –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (purge): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚Ä¶"
  safe_remove "$CONFIG_DIR" "–∫–∞—Ç–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
else
  echo "‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ ${CONFIG_DIR} –æ—Å—Ç–∞–≤–ª–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --purge –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)."
fi

echo ""
if $DRY_RUN; then
  echo "‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ."
else
  echo "üéâ –ì–æ—Ç–æ–≤–æ. ${PACKAGE_NAME} —É–¥–∞–ª—ë–Ω."
fi
